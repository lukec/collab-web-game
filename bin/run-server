#!/usr/bin/perl
use strict;
use warnings;
use IO::All;
use AnyEvent::HTTPD;
use Algorithm::Numerical::Shuffle qw/shuffle/;
use Data::Dumper;

my $ip = find_my_ip();
my $port = 9090;
my %host_state;

my $httpd = AnyEvent::HTTPD->new (port => $port);
$httpd->reg_cb (
   '/' => sub {
      my ($httpd, $req) = @_;
      $httpd->stop_request;

      my $content = <<'EOT';
<html>
  <head>
    <script type="text/javascript" src="/static/jquery-1.3.2.min.js"></script>          
    <script type="text/javascript" src="/static/game.js"></script>
    <link rel="stylesheet" type="text/css" href="/static/game.css" />
  </head>
  <body>
    <center>
        <h1>Word Game</h1>
        Choose your word, I only want one!<br />
        <form action="/game/update">
        <input type="text" id="my_word" length="12" name="word"/>
        <br />
        <input type="submit" value="submit" onSubmit="send_word(); return false" />
        </form>
    </center>
  </body>
</html>
EOT
      $req->respond({ content => ['text/html', $content ]});
   },
   '/show' => sub {
      my ($httpd, $req) = @_;
      $httpd->stop_request;

      my $body = game_state_to_html();

      my $content = <<EOT;
<html>
  <head>
    <script type="text/javascript" src="/static/jquery-1.3.2.min.js"></script>          
    <script type="text/javascript" src="/static/game.js"></script>
    <script type="text/javascript" src="/static/game-show.js"></script>
    <link rel="stylesheet" type="text/css" href="/static/game.css" />
  </head>
  <body>
    <h1 class="big">Word Game!  Connect to $ip:$port</h1>
    <div id="game_canvas">
        $body
    </div>
  </body>
</html>
EOT
      $req->respond({ content => ['text/html', $content ]});
   },
   '/show/fragment' => sub {
      my ($httpd, $req) = @_;
      $httpd->stop_request;

      my $body = game_state_to_html();
      $req->respond({ content => ['text/html', $body ]});
   },
   '/game/update' => sub {
      my ($httpd, $req) = @_;
      $httpd->stop_request;

      my $word = $req->parm('word') || '';
      my $client_id = $req->parm('id') || '';
      if ($client_id and $word) {
          $word =~ s/\s.+//;
          my $new_host = exists $host_state{$client_id} ? 0 : 1;
          $host_state{$client_id} = $word;
          make_host_list() if $new_host;
      }
      $req->respond({ content => ['text/html', 'Thanks' ]});
   },
   '/static' => sub { _serve_static(@_) },
   '' => sub {
       my ($httpd, $req) = @_;
       warn "Unknown path!! " . $req->url;
       $req->respond({content => ['text/html', "Unknown address: " . $req->url]});
   },
);

warn "Starting ...\n";
$httpd->run;
exit;


sub _serve_static {
    my ($httpd, $req, $file) = @_;
    $httpd->stop_request;

    my $url = $req->url;
    $url =~ s#.+/(.+)#$1#;
    my $filename = "static/$url";
    die "Can't find $filename!" unless -e $filename;
    open(my $fh, $filename) or $req->respond (
        [404, 'not found', { 'Content-Type' => 'text/plain' }, 'not found']
    );

    my $content = do { local $/; <$fh> };
    $req->respond({ content => ['text/javascript', $content ]});
}

sub calc_square {
    my $num = keys %host_state;
    my $i = 0;
    while($i*$i < $num) {
        $i++;
    }
    return 2 if $i == 1; # special case
    return $i;
}

{
    my @host_order;

    sub get_host_order {
        return @host_order;
    }

    sub make_host_list {
        @host_order = shuffle keys %host_state;
    }
}


sub game_state_to_html {
#    warn Dumper \%host_state;

    my @hosts = get_host_order();

    if (@hosts == 0) {
        return 'Nobody connected yet!';
    }

    my @words;
    for my $host (@hosts) {
        push @words, $host_state{$host};
    }
    return join ' ', @words;
}

sub find_my_ip {
    my $ip = qx(ifconfig|grep 'inet ' | grep -v 127.0.0.1| grep -v 192.168. | awk '{print \$2}');
    chomp $ip;
    return $ip;
}
